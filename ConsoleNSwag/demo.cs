//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace MyNamespace
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class IdentityClient 
    {
        private string _baseUrl = "https://localhost:44319";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public IdentityClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationUser> SignInAsync(string email, string password)
        {
            return SignInAsync(email, password, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApplicationUser> SignInAsync(string email, string password, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Identity?");
            if (password != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("password") + "=").Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(email, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApplicationUser>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MessageClient 
    {
        private string _baseUrl = "https://localhost:44319";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public MessageClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Message>> GetAllAsync()
        {
            return GetAllAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Message>> GetAllAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/message");
    
            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Message>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> PostAsync(System.DateTimeOffset? sendingTime, string textMessage, string userId, System.DateTimeOffset? user_CreatedOn, System.DateTimeOffset? user_ModifiedOn, bool? user_IsDeleted, System.DateTimeOffset? user_DeletedOn, System.Collections.Generic.IEnumerable<IdentityUserRoleOfString> user_Roles, System.Collections.Generic.IEnumerable<IdentityUserClaimOfString> user_Claims, System.Collections.Generic.IEnumerable<IdentityUserLoginOfString> user_Logins, System.Collections.Generic.IEnumerable<Message> user_Messages, System.Collections.Generic.IEnumerable<UserChatRoom> user_ChatRooms, string user_Id, string user_UserName, string user_NormalizedUserName, string user_Email, string user_NormalizedEmail, bool? user_EmailConfirmed, string user_PasswordHash, string user_SecurityStamp, string user_ConcurrencyStamp, string user_PhoneNumber, bool? user_PhoneNumberConfirmed, bool? user_TwoFactorEnabled, System.DateTimeOffset? user_LockoutEnd, bool? user_LockoutEnabled, int? user_AccessFailedCount, int? chatRoomId, string chatRoom_Name, System.Collections.Generic.IEnumerable<Message> chatRoom_Messages, System.Collections.Generic.IEnumerable<UserChatRoom> chatRoom_Users, bool? chatRoom_IsDeleted, System.DateTimeOffset? chatRoom_DeletedOn, int? chatRoom_Id, System.DateTimeOffset? chatRoom_CreatedOn, System.DateTimeOffset? chatRoom_ModifiedOn, bool? isDeleted, System.DateTimeOffset? deletedOn, int? id, System.DateTimeOffset? createdOn, System.DateTimeOffset? modifiedOn)
        {
            return PostAsync(sendingTime, textMessage, userId, user_CreatedOn, user_ModifiedOn, user_IsDeleted, user_DeletedOn, user_Roles, user_Claims, user_Logins, user_Messages, user_ChatRooms, user_Id, user_UserName, user_NormalizedUserName, user_Email, user_NormalizedEmail, user_EmailConfirmed, user_PasswordHash, user_SecurityStamp, user_ConcurrencyStamp, user_PhoneNumber, user_PhoneNumberConfirmed, user_TwoFactorEnabled, user_LockoutEnd, user_LockoutEnabled, user_AccessFailedCount, chatRoomId, chatRoom_Name, chatRoom_Messages, chatRoom_Users, chatRoom_IsDeleted, chatRoom_DeletedOn, chatRoom_Id, chatRoom_CreatedOn, chatRoom_ModifiedOn, isDeleted, deletedOn, id, createdOn, modifiedOn, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> PostAsync(System.DateTimeOffset? sendingTime, string textMessage, string userId, System.DateTimeOffset? user_CreatedOn, System.DateTimeOffset? user_ModifiedOn, bool? user_IsDeleted, System.DateTimeOffset? user_DeletedOn, System.Collections.Generic.IEnumerable<IdentityUserRoleOfString> user_Roles, System.Collections.Generic.IEnumerable<IdentityUserClaimOfString> user_Claims, System.Collections.Generic.IEnumerable<IdentityUserLoginOfString> user_Logins, System.Collections.Generic.IEnumerable<Message> user_Messages, System.Collections.Generic.IEnumerable<UserChatRoom> user_ChatRooms, string user_Id, string user_UserName, string user_NormalizedUserName, string user_Email, string user_NormalizedEmail, bool? user_EmailConfirmed, string user_PasswordHash, string user_SecurityStamp, string user_ConcurrencyStamp, string user_PhoneNumber, bool? user_PhoneNumberConfirmed, bool? user_TwoFactorEnabled, System.DateTimeOffset? user_LockoutEnd, bool? user_LockoutEnabled, int? user_AccessFailedCount, int? chatRoomId, string chatRoom_Name, System.Collections.Generic.IEnumerable<Message> chatRoom_Messages, System.Collections.Generic.IEnumerable<UserChatRoom> chatRoom_Users, bool? chatRoom_IsDeleted, System.DateTimeOffset? chatRoom_DeletedOn, int? chatRoom_Id, System.DateTimeOffset? chatRoom_CreatedOn, System.DateTimeOffset? chatRoom_ModifiedOn, bool? isDeleted, System.DateTimeOffset? deletedOn, int? id, System.DateTimeOffset? createdOn, System.DateTimeOffset? modifiedOn, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/message?");
            if (sendingTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SendingTime") + "=").Append(System.Uri.EscapeDataString(sendingTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (textMessage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TextMessage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(textMessage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("UserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_CreatedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.CreatedOn") + "=").Append(System.Uri.EscapeDataString(user_CreatedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_ModifiedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.ModifiedOn") + "=").Append(System.Uri.EscapeDataString(user_ModifiedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_IsDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.IsDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_IsDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_DeletedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.DeletedOn") + "=").Append(System.Uri.EscapeDataString(user_DeletedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_Roles != null)
            {
                foreach (var item_ in user_Roles) { urlBuilder_.Append(System.Uri.EscapeDataString("User.Roles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (user_Claims != null)
            {
                foreach (var item_ in user_Claims) { urlBuilder_.Append(System.Uri.EscapeDataString("User.Claims") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (user_Logins != null)
            {
                foreach (var item_ in user_Logins) { urlBuilder_.Append(System.Uri.EscapeDataString("User.Logins") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (user_Messages != null)
            {
                foreach (var item_ in user_Messages) { urlBuilder_.Append(System.Uri.EscapeDataString("User.Messages") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (user_ChatRooms != null)
            {
                foreach (var item_ in user_ChatRooms) { urlBuilder_.Append(System.Uri.EscapeDataString("User.ChatRooms") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (user_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_UserName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.UserName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_UserName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_NormalizedUserName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.NormalizedUserName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_NormalizedUserName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_Email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.Email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_Email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_NormalizedEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.NormalizedEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_NormalizedEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_EmailConfirmed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.EmailConfirmed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_EmailConfirmed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_PasswordHash != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.PasswordHash") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_PasswordHash, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_SecurityStamp != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.SecurityStamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_SecurityStamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_ConcurrencyStamp != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.ConcurrencyStamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_ConcurrencyStamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_PhoneNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.PhoneNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_PhoneNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_PhoneNumberConfirmed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.PhoneNumberConfirmed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_PhoneNumberConfirmed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_TwoFactorEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.TwoFactorEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_TwoFactorEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_LockoutEnd != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.LockoutEnd") + "=").Append(System.Uri.EscapeDataString(user_LockoutEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_LockoutEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.LockoutEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_LockoutEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_AccessFailedCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.AccessFailedCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_AccessFailedCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoomId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoomId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chatRoomId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_Name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chatRoom_Name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_Messages != null)
            {
                foreach (var item_ in chatRoom_Messages) { urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.Messages") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (chatRoom_Users != null)
            {
                foreach (var item_ in chatRoom_Users) { urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.Users") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (chatRoom_IsDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.IsDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chatRoom_IsDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_DeletedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.DeletedOn") + "=").Append(System.Uri.EscapeDataString(chatRoom_DeletedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chatRoom_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_CreatedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.CreatedOn") + "=").Append(System.Uri.EscapeDataString(chatRoom_CreatedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_ModifiedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.ModifiedOn") + "=").Append(System.Uri.EscapeDataString(chatRoom_ModifiedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deletedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeletedOn") + "=").Append(System.Uri.EscapeDataString(deletedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CreatedOn") + "=").Append(System.Uri.EscapeDataString(createdOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ModifiedOn") + "=").Append(System.Uri.EscapeDataString(modifiedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, client_, response_); 
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> PutAsync(System.DateTimeOffset? sendingTime, string textMessage, string userId, System.DateTimeOffset? user_CreatedOn, System.DateTimeOffset? user_ModifiedOn, bool? user_IsDeleted, System.DateTimeOffset? user_DeletedOn, System.Collections.Generic.IEnumerable<IdentityUserRoleOfString> user_Roles, System.Collections.Generic.IEnumerable<IdentityUserClaimOfString> user_Claims, System.Collections.Generic.IEnumerable<IdentityUserLoginOfString> user_Logins, System.Collections.Generic.IEnumerable<Message> user_Messages, System.Collections.Generic.IEnumerable<UserChatRoom> user_ChatRooms, string user_Id, string user_UserName, string user_NormalizedUserName, string user_Email, string user_NormalizedEmail, bool? user_EmailConfirmed, string user_PasswordHash, string user_SecurityStamp, string user_ConcurrencyStamp, string user_PhoneNumber, bool? user_PhoneNumberConfirmed, bool? user_TwoFactorEnabled, System.DateTimeOffset? user_LockoutEnd, bool? user_LockoutEnabled, int? user_AccessFailedCount, int? chatRoomId, string chatRoom_Name, System.Collections.Generic.IEnumerable<Message> chatRoom_Messages, System.Collections.Generic.IEnumerable<UserChatRoom> chatRoom_Users, bool? chatRoom_IsDeleted, System.DateTimeOffset? chatRoom_DeletedOn, int? chatRoom_Id, System.DateTimeOffset? chatRoom_CreatedOn, System.DateTimeOffset? chatRoom_ModifiedOn, bool? isDeleted, System.DateTimeOffset? deletedOn, int? id, System.DateTimeOffset? createdOn, System.DateTimeOffset? modifiedOn)
        {
            return PutAsync(sendingTime, textMessage, userId, user_CreatedOn, user_ModifiedOn, user_IsDeleted, user_DeletedOn, user_Roles, user_Claims, user_Logins, user_Messages, user_ChatRooms, user_Id, user_UserName, user_NormalizedUserName, user_Email, user_NormalizedEmail, user_EmailConfirmed, user_PasswordHash, user_SecurityStamp, user_ConcurrencyStamp, user_PhoneNumber, user_PhoneNumberConfirmed, user_TwoFactorEnabled, user_LockoutEnd, user_LockoutEnabled, user_AccessFailedCount, chatRoomId, chatRoom_Name, chatRoom_Messages, chatRoom_Users, chatRoom_IsDeleted, chatRoom_DeletedOn, chatRoom_Id, chatRoom_CreatedOn, chatRoom_ModifiedOn, isDeleted, deletedOn, id, createdOn, modifiedOn, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> PutAsync(System.DateTimeOffset? sendingTime, string textMessage, string userId, System.DateTimeOffset? user_CreatedOn, System.DateTimeOffset? user_ModifiedOn, bool? user_IsDeleted, System.DateTimeOffset? user_DeletedOn, System.Collections.Generic.IEnumerable<IdentityUserRoleOfString> user_Roles, System.Collections.Generic.IEnumerable<IdentityUserClaimOfString> user_Claims, System.Collections.Generic.IEnumerable<IdentityUserLoginOfString> user_Logins, System.Collections.Generic.IEnumerable<Message> user_Messages, System.Collections.Generic.IEnumerable<UserChatRoom> user_ChatRooms, string user_Id, string user_UserName, string user_NormalizedUserName, string user_Email, string user_NormalizedEmail, bool? user_EmailConfirmed, string user_PasswordHash, string user_SecurityStamp, string user_ConcurrencyStamp, string user_PhoneNumber, bool? user_PhoneNumberConfirmed, bool? user_TwoFactorEnabled, System.DateTimeOffset? user_LockoutEnd, bool? user_LockoutEnabled, int? user_AccessFailedCount, int? chatRoomId, string chatRoom_Name, System.Collections.Generic.IEnumerable<Message> chatRoom_Messages, System.Collections.Generic.IEnumerable<UserChatRoom> chatRoom_Users, bool? chatRoom_IsDeleted, System.DateTimeOffset? chatRoom_DeletedOn, int? chatRoom_Id, System.DateTimeOffset? chatRoom_CreatedOn, System.DateTimeOffset? chatRoom_ModifiedOn, bool? isDeleted, System.DateTimeOffset? deletedOn, int? id, System.DateTimeOffset? createdOn, System.DateTimeOffset? modifiedOn, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/message?");
            if (sendingTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SendingTime") + "=").Append(System.Uri.EscapeDataString(sendingTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (textMessage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TextMessage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(textMessage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("UserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_CreatedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.CreatedOn") + "=").Append(System.Uri.EscapeDataString(user_CreatedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_ModifiedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.ModifiedOn") + "=").Append(System.Uri.EscapeDataString(user_ModifiedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_IsDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.IsDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_IsDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_DeletedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.DeletedOn") + "=").Append(System.Uri.EscapeDataString(user_DeletedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_Roles != null)
            {
                foreach (var item_ in user_Roles) { urlBuilder_.Append(System.Uri.EscapeDataString("User.Roles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (user_Claims != null)
            {
                foreach (var item_ in user_Claims) { urlBuilder_.Append(System.Uri.EscapeDataString("User.Claims") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (user_Logins != null)
            {
                foreach (var item_ in user_Logins) { urlBuilder_.Append(System.Uri.EscapeDataString("User.Logins") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (user_Messages != null)
            {
                foreach (var item_ in user_Messages) { urlBuilder_.Append(System.Uri.EscapeDataString("User.Messages") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (user_ChatRooms != null)
            {
                foreach (var item_ in user_ChatRooms) { urlBuilder_.Append(System.Uri.EscapeDataString("User.ChatRooms") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (user_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_UserName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.UserName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_UserName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_NormalizedUserName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.NormalizedUserName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_NormalizedUserName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_Email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.Email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_Email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_NormalizedEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.NormalizedEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_NormalizedEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_EmailConfirmed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.EmailConfirmed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_EmailConfirmed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_PasswordHash != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.PasswordHash") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_PasswordHash, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_SecurityStamp != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.SecurityStamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_SecurityStamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_ConcurrencyStamp != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.ConcurrencyStamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_ConcurrencyStamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_PhoneNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.PhoneNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_PhoneNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_PhoneNumberConfirmed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.PhoneNumberConfirmed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_PhoneNumberConfirmed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_TwoFactorEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.TwoFactorEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_TwoFactorEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_LockoutEnd != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.LockoutEnd") + "=").Append(System.Uri.EscapeDataString(user_LockoutEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_LockoutEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.LockoutEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_LockoutEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_AccessFailedCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("User.AccessFailedCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_AccessFailedCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoomId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoomId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chatRoomId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_Name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chatRoom_Name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_Messages != null)
            {
                foreach (var item_ in chatRoom_Messages) { urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.Messages") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (chatRoom_Users != null)
            {
                foreach (var item_ in chatRoom_Users) { urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.Users") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (chatRoom_IsDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.IsDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chatRoom_IsDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_DeletedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.DeletedOn") + "=").Append(System.Uri.EscapeDataString(chatRoom_DeletedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chatRoom_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_CreatedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.CreatedOn") + "=").Append(System.Uri.EscapeDataString(chatRoom_CreatedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (chatRoom_ModifiedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ChatRoom.ModifiedOn") + "=").Append(System.Uri.EscapeDataString(chatRoom_ModifiedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deletedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeletedOn") + "=").Append(System.Uri.EscapeDataString(deletedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CreatedOn") + "=").Append(System.Uri.EscapeDataString(createdOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ModifiedOn") + "=").Append(System.Uri.EscapeDataString(modifiedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, client_, response_); 
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Message>> GetAsync(int id)
        {
            return GetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Message>> GetAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/message/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Message>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> DeleteAsync(int id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> DeleteAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/message/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, client_, response_); 
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ApplicationUser : IdentityUser
    {
        [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedOn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ModifiedOn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDeleted { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedOn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentityUserRoleOfString> Roles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claims", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentityUserClaimOfString> Claims { get; set; }
    
        [Newtonsoft.Json.JsonProperty("logins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentityUserLoginOfString> Logins { get; set; }
    
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chatRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserChatRoom> ChatRooms { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IdentityUserRoleOfString 
    {
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoleId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IdentityUserClaimOfString 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimValue { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IdentityUserLoginOfString 
    {
        [Newtonsoft.Json.JsonProperty("loginProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoginProvider { get; set; }
    
        [Newtonsoft.Json.JsonProperty("providerKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProviderKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("providerDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProviderDisplayName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Message : BaseDeletableModelOfInteger
    {
        [Newtonsoft.Json.JsonProperty("sendingTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset SendingTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("textMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TextMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationUser User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chatRoomId", Required = Newtonsoft.Json.Required.Always)]
        public int ChatRoomId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chatRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChatRoom ChatRoom { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ChatRoom : BaseDeletableModelOfInteger
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserChatRoom> Users { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UserChatRoom 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationUser User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chatRoomId", Required = Newtonsoft.Json.Required.Always)]
        public int ChatRoomId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chatRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChatRoom ChatRoom { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public abstract partial class BaseDeletableModelOfInteger : BaseModelOfInteger
    {
        [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDeleted { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedOn { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public abstract partial class BaseModelOfInteger 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedOn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ModifiedOn { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IdentityUser : IdentityUserOfString
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IdentityUserOfString 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("normalizedUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NormalizedUserName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("normalizedEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NormalizedEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emailConfirmed", Required = Newtonsoft.Json.Required.Always)]
        public bool EmailConfirmed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("passwordHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PasswordHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("securityStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecurityStamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("concurrencyStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConcurrencyStamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phoneNumberConfirmed", Required = Newtonsoft.Json.Required.Always)]
        public bool PhoneNumberConfirmed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("twoFactorEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool TwoFactorEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lockoutEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LockoutEnd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lockoutEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool LockoutEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accessFailedCount", Required = Newtonsoft.Json.Required.Always)]
        public int AccessFailedCount { get; set; }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108